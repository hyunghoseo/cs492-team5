Hyungho Seo, Ryan Edelstein
I pledge my honor that I have abided by the Stevens Honor Sytem.

Task 1: We created a mutex called "grab_mutex" in order to make the action of attempting to grab both forks mutually exclusive. In other words, only one philosopher can attempt to grab their forks at a time. Whenever a philosopher is hungry, we lock "grab_mutex" and let the philosopher attempt to grab both forks. Therefore, any other hungry philosopher at this time won't be able to attempt to grab their forks. Afterwards, we unlock "grab_mutex", allowing other philosophers to grab their forks. This solution prevents the deadlock issue since it occurs when all five philosophers are attempting to grab their forks at the same time.

Task 2: We created "attempts", a counter for tracking how many attempts are ongoing at the same time, and a mutex "attempt_mutex" for protecting "attempts" while we modify it. Finally, a condition variable "eat_cond" which we will use to block the thread in case the max number of attempts is exceeded. Whenever a philosopher is hungry, we lock "attempts_mutex" and increment "attempts" and check if the number of attempts is greater than the max we allowed, which is 4. If so, we lock the thread by waiting on "eat_cond" which will get signalled whenever an attempt finishes. When the attempt is ready to proceed, the "attempt_mutex" is unlocked, and the philosopher attempts to grab the forks. Afterwards, we lock the mutex again, decrement "attempts", and unlock the mutex. This solution prevents the deadlock issue since it ensures that the number of attempts are no greater than 4 at any time.